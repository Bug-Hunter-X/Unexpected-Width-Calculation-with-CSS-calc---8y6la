Several approaches can solve or mitigate this issue:

1. **Avoid `calc()` if possible:** If feasible, use fixed pixel values or percentage-based widths instead of `calc()`.  This eliminates the browser's interpretation of the calculation altogether.

2. **Add Fallback Styles:** Provide fallback styles using a more widely supported approach. This ensures some level of consistent behavior across browsers:

```css
div {
  width: 98%; /* Fallback width */
}
div {
  width: calc(100% - 20px);
}
```

3. **Use JavaScript for Dynamic Calculations:** In scenarios where dynamic width adjustment is necessary, use JavaScript to calculate the width and apply it to the element's `style.width` property.  This offers greater control and precision:

```javascript
const div = document.getElementById('myDiv');
div.style.width = `${div.parentElement.offsetWidth - 20}px`;
```

4. **Testing and Browser Compatibility Checks:** Thoroughly test your CSS across various browsers and versions.  Use browser developer tools to inspect the calculated width and identify any discrepancies.

Choose the approach best suited for your context. Consider that using JavaScript might add complexity. Fallback styles provide a good balance of robustness and simplicity.